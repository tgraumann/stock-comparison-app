{"version":3,"sources":["api/urls.tsx","components/InputDropdown.tsx","components/SearchInput.tsx","components/Card.tsx","components/LineChart.tsx","components/PinnedStocks.tsx","components/Dashboard.tsx","App.tsx","reportWebVitals.js","index.tsx"],"names":["searchResponse","inputValue","axios","get","process","overviewResponse","pinnedStock","globalQuoteResponse","firstStockResponse","pinnedStocks","currStockResponse","stock","InputDropdown","handleClick","useState","dropdownList","setDropdownList","handleStockSelect","event","useEffect","fetchData","a","searchRes","data","bestMatches","console","log","length","className","style","width","maxHeight","map","index","onClick","height","lineHeight","role","SearchInput","setInputValue","onSubmit","e","preventDefault","margin","type","onChange","target","value","Card","removeStock","name","setName","currency","setCurrency","price","setPrice","changePercentStat","setChangePercentStat","highStat","setHighStat","lowStat","setLowStat","overviewRes","globalQuoteRes","Number","flex","padding","toFixed","Fragment","LineChart","chartData","setChartData","firstStockRes","keysArr","Object","keys","stockDatasets","currStockRes","dailyStats","entries","valuesArr","forEach","push","label","backgroundColor","labels","datasets","maxWidth","options","scales","y","ticks","callback","PinnedStocks","handleRemoveStock","onRemoveStock","selectedStock","CardBuilder","cardItems","i","undefined","minHeight","Dashboard","selectedStocks","setSelectedStocks","innerText","includes","alert","filter","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5b22e6f4.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nexport const searchResponse = (inputValue: String) => axios.get(`${process.env.REACT_APP_BASE_API_URL}/query?function=SYMBOL_SEARCH&keywords=${inputValue}&apikey=${process.env.REACT_APP_API_KEY1}`);\r\nexport const overviewResponse = (pinnedStock: String) =>  axios.get(`${process.env.REACT_APP_BASE_API_URL}/query?function=OVERVIEW&symbol=${pinnedStock}&apikey=${process.env.REACT_APP_API_KEY2}`);\r\nexport const globalQuoteResponse = (pinnedStock: String) => axios.get(`${process.env.REACT_APP_BASE_API_URL}/query?function=GLOBAL_QUOTE&symbol=${pinnedStock}&apikey=${process.env.REACT_APP_API_KEY3}`);\r\nexport const firstStockResponse = (pinnedStocks: Array<String>) => axios.get(`${process.env.REACT_APP_BASE_API_URL}/query?function=TIME_SERIES_DAILY&symbol=${pinnedStocks[0]}&apikey=${process.env.REACT_APP_API_KEY4}`);\r\nexport const currStockResponse = (stock: String) => axios.get(`${process.env.REACT_APP_BASE_API_URL}/query?function=TIME_SERIES_DAILY&symbol=${stock}&apikey=${process.env.REACT_APP_API_KEY5}`);","import React, { useEffect, useState } from 'react';\r\nimport { searchResponse } from '../api/urls';\r\n\r\ntype InputDropdownProps = {\r\n    inputValue: String,\r\n    handleClick: (e: React.FormEvent<HTMLInputElement>) => void;\r\n}\r\n\r\nconst InputDropdown:  React.FC<InputDropdownProps> = ({ inputValue, handleClick }) => {\r\n    \r\n    const [dropdownList, setDropdownList] = useState<Array<any>>([]);\r\n\r\n    const handleStockSelect = (event: React.MouseEvent<HTMLElement>) => {\r\n        const e = event as unknown as React.FormEvent<HTMLInputElement>;\r\n        handleClick(e);\r\n    };\r\n\r\n    useEffect(() => {\r\n\r\n        const fetchData = async () => {\r\n            try {\r\n                let searchRes = await searchResponse(inputValue);\r\n                if(searchRes.data.bestMatches) {\r\n                    setDropdownList(searchRes.data.bestMatches);\r\n                }\r\n            } catch (err) {\r\n                console.log('Error with dropdown search: ', err);\r\n            }\r\n        };\r\n\r\n        if (inputValue.length) {\r\n            fetchData();\r\n        }\r\n\r\n    }, [inputValue]);\r\n\r\n    return ( \r\n        <div>\r\n            {(dropdownList.length > 0)\r\n                ? <ul \r\n                    data-testid=\"dropdown\"\r\n                    className=\"\r\n                        p-0 \r\n                        list-unstyled \r\n                        shadow \r\n                        overflow-auto\" \r\n                    style={{\r\n                        width: '300px', \r\n                        maxHeight: '180px',\r\n                    }}\r\n                >\r\n                    {dropdownList.map((stock, index) => {\r\n                        return (\r\n                            <li\r\n                                key={index} \r\n                                onClick={handleStockSelect} \r\n                                style={{\r\n                                    height: '45px',\r\n                                    lineHeight: '2.5em',\r\n                                }}\r\n                                role=\"button\"\r\n                                className={`\r\n                                    border-bottom\r\n                                    mb-0\r\n                                    px-1\r\n                                    dropdownListClass\r\n                                    bg-${(index % 2) \r\n                                        ? 'light' \r\n                                        : 'white'}\r\n                                `}\r\n                            >\r\n                                {stock['1. symbol']}\r\n                            </li>\r\n                            );\r\n                    })}\r\n                </ul>\r\n                : <p \r\n                    className=\"bg-light p-2 shadow\" \r\n                    style={{\r\n                        width: '300px',\r\n                    }}\r\n                >\r\n                    No suggestions...\r\n                </p>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default InputDropdown;","import React, { useState } from 'react';\r\nimport InputDropdown from './InputDropdown';\r\n\r\ntype SearchInputProps = {\r\n    handleStockSelect: (e: React.FormEvent<HTMLInputElement>) => void,\r\n}\r\n\r\nconst SearchInput:  React.FC<SearchInputProps> = ({ handleStockSelect }) => {\r\n\r\n    const [inputValue, setInputValue] = useState<String>('');\r\n    \r\n    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleClick = (e: React.FormEvent<HTMLInputElement>) => {\r\n        handleStockSelect(e);\r\n    }\r\n\r\n    const onSubmit = async (e: React.FormEvent<HTMLFormElement>) => e.preventDefault(); \r\n\r\n    return (\r\n        <div \r\n            className=\"\r\n                w-75 \r\n                p-5 \r\n                my-5 \r\n                rounded \r\n                shadow-sm \r\n                border\" \r\n            style={{\r\n                margin: '0 auto',\r\n                height: '200px',\r\n            }}\r\n        >\r\n            <form \r\n                onSubmit={onSubmit}\r\n                className=\"d-flex flex-column w-100 align-items-center\"       \r\n            >\r\n                <label data-testid=\"label\">\r\n                    Search up to 3 stocks and pin them to the dashboard to compare them:\r\n                </label>\r\n                <input \r\n                    data-testid=\"input\"\r\n                    className=\"mt-4 p-2\"\r\n                    style={{width: '300px',}}\r\n                    type=\"text\" \r\n                    onChange={handleChange} \r\n                />\r\n            </form>\r\n            <div className=\"d-flex justify-content-center\">\r\n            {(inputValue !== '') &&\r\n                <InputDropdown\r\n                    inputValue={inputValue}\r\n                    handleClick={handleClick}\r\n                />\r\n            }\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SearchInput;","import React from 'react';\r\nimport { useEffect, useState } from 'react';\r\nimport { overviewResponse, globalQuoteResponse } from '../api/urls';\r\n\r\ntype CardProps = {\r\n    pinnedStock: String,\r\n    removeStock: (stock: String) => void,\r\n    index: Number,\r\n}\r\n\r\nconst Card: React.FC<CardProps> = ({ pinnedStock, removeStock, index}) => {\r\n\r\n    const [name, setName] = useState<String>('');\r\n    const [currency, setCurrency] = useState<String>('');\r\n    const [price, setPrice] = useState<Number>();\r\n    const [changePercentStat, setChangePercentStat] = useState<String>('');\r\n    const [highStat, setHighStat] = useState<Number>();\r\n    const [lowStat, setLowStat] = useState<Number>();\r\n    \r\n    const handleClick = (stock: String) => {\r\n        removeStock(stock);\r\n    };\r\n\r\n    useEffect(() => {\r\n\r\n        const fetchData = async () => {\r\n            try {\r\n                let overviewRes = await overviewResponse(pinnedStock);\r\n                setCurrency(overviewRes.data[\"Currency\"]);\r\n                \r\n                let globalQuoteRes = await globalQuoteResponse(pinnedStock);\r\n                setPrice(Number(globalQuoteRes.data[\"Global Quote\"][\"05. price\"]));\r\n                setName(overviewRes.data[\"Name\"]);\r\n                setChangePercentStat(globalQuoteRes.data[\"Global Quote\"][\"10. change percent\"]);\r\n                setHighStat(Number(globalQuoteRes.data[\"Global Quote\"][\"03. high\"]));\r\n                setLowStat(Number(globalQuoteRes.data[\"Global Quote\"][\"04. low\"]));\r\n\r\n            } catch (err) {\r\n                console.log(\"Error fetching stock data: \", err);\r\n            }\r\n        };\r\n        fetchData();\r\n\r\n    }, [pinnedStock]);\r\n\r\n    return (\r\n        <div \r\n            style={{\r\n                flex: '1 1 0',\r\n            }} \r\n            className=\"\r\n                p-3 \r\n                m-3 \r\n                rounded \r\n                shadow-sm \r\n                border\"\r\n        >\r\n            <div className=\"d-flex justify-content-between\">\r\n                <div>\r\n                    <h3 className=\"pt-2\">\r\n                        {pinnedStock}\r\n                    </h3>\r\n                    {name\r\n                        ? <p>{name}</p>\r\n                        : <p className=\"text-secondary\">Name unavailable...</p>\r\n                    }\r\n                   \r\n                </div>\r\n                <span \r\n                    className=\"\r\n                        rounded-circle \r\n                        bg-danger \r\n                        shadow-sm \r\n                        text-white \r\n                        text-center \r\n                        font-weight-light\"\r\n                    style={{\r\n                        height: '30px',\r\n                        width: '30px',\r\n                        padding: '1px',\r\n                    }} \r\n                    onClick={() => handleClick(pinnedStock)}\r\n                >\r\n                    x\r\n                </span>\r\n            </div>\r\n            {price && changePercentStat ? (\r\n                <div className=\"d-flex\"> \r\n                    <div className=\"fs-1\">\r\n                        {(changePercentStat[0] === '-') \r\n                            ? <div className=\"bi bi-arrow-down text-danger text-center\"></div>\r\n                            : <div className=\"bi bi-arrow-up text-success text-center\"></div>\r\n                        }\r\n                    </div>\r\n                    <div>\r\n                        <h4>{currency !== '' ? currency : 'USD'} {(price).toFixed(2)}</h4>\r\n                        <p>{changePercentStat}</p>\r\n                    </div>\r\n                </div>\r\n            ) : (\r\n                <p className=\"text-secondary\">\r\n                    Stock data currently unavailable...\r\n                </p>\r\n            )}\r\n            <React.Fragment>\r\n                <h5>Stats:</h5>\r\n                <table>\r\n                    <tbody>\r\n                        <tr>\r\n                            <th>High:</th>\r\n                            {highStat\r\n                                ? <td>{(highStat).toFixed(2)}</td>\r\n                                : <td className=\"text-secondary\">...</td>\r\n                            }\r\n                        </tr>\r\n                        <tr>\r\n                            <th>Low:</th>\r\n                            {lowStat\r\n                                ? <td>{(lowStat).toFixed(2)}</td>\r\n                                : <td className=\"text-secondary\">...</td>\r\n                            }\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </React.Fragment>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Card;","import React from 'react';\r\nimport { firstStockResponse, currStockResponse } from '../api/urls';\r\nimport { useEffect, useState } from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\n\r\ntype LineChartProps = {\r\n    pinnedStocks: Array<String> | [],\r\n}\r\n\r\ntype StockDatasetsProps = {\r\n    label: String, \r\n    data: Array<Number>, \r\n    backgroundColor: String,\r\n}\r\n\r\ntype DataProps = {\r\n    labels: Array<String>,\r\n    datasets: Array<StockDatasetsProps>\r\n}\r\n\r\nconst LineChart: React.FC<LineChartProps> = ({ pinnedStocks }) => {\r\n\r\n    const [chartData, setChartData] = useState<DataProps | {}>({});\r\n\r\n    useEffect(() =>{\r\n\r\n        const fetchData = async () => {\r\n            try {\r\n                // grab keys from first pinned stock to create chart labels from\r\n                let firstStockRes = await firstStockResponse(pinnedStocks);\r\n                let keysArr = Object.keys(firstStockRes.data['Time Series (Daily)']);\r\n\r\n                // collect fetched datasets to plug into data object\r\n                let stockDatasets = [];\r\n\r\n                for (let stock of pinnedStocks) {\r\n\r\n                    // fetching daily stats for current stock\r\n                    let currStockRes = await currStockResponse(stock);\r\n                    let dailyStats = Object.entries(currStockRes.data['Time Series (Daily)']);\r\n                    \r\n                    // loop through closing prices of stock and push them into temp valuesArr \r\n                    let valuesArr: Array<Number> = [];\r\n                    dailyStats.forEach((value: Array<any>) => {\r\n                        valuesArr.push(Number(value[1]['4. close']));\r\n                    });\r\n\r\n                    stockDatasets.push({\r\n                        label: stock, \r\n                        data: valuesArr, \r\n                        backgroundColor: 'rgba(255, 99, 132, 0.6)',\r\n                    });\r\n                }\r\n\r\n                const data: DataProps = {\r\n                    labels: keysArr,\r\n                    datasets: stockDatasets\r\n                };\r\n\r\n                // update chartData\r\n                setChartData(data);\r\n\r\n            } catch (err) {\r\n                console.log(\"Error grabbing chart data: \", err);\r\n            }\r\n        };\r\n\r\n        if (pinnedStocks.length) {\r\n            fetchData();\r\n        }\r\n    }, [pinnedStocks]);\r\n\r\n    return (\r\n        <div\r\n            style={{\r\n                margin: '0 auto', \r\n                maxWidth: '75vw'\r\n            }}\r\n        >\r\n            {pinnedStocks.length > 0 && (\r\n                <Line\r\n                    className=\"px-5 pt-4 pb-5\"\r\n                    data={chartData}\r\n                    options={{\r\n                        scales: {\r\n                            y: {\r\n                                ticks: {\r\n                                    callback: function(value: number) {\r\n                                        return '$' + (value).toFixed(2);\r\n                                    }\r\n                                },\r\n                            },\r\n                        },\r\n                    }}\r\n                />\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LineChart;","import React from 'react';\r\nimport Card from './Card';\r\nimport LineChart from './LineChart';\r\n\r\ntype PinnedStocksProps = {\r\n    pinnedStocks: Array<String>,\r\n    handleRemoveStock: (selectedStock: String) => void,\r\n}\r\n\r\nconst PinnedStocks: React.FC<PinnedStocksProps> = ({ pinnedStocks, handleRemoveStock }) => {\r\n\r\n    const onRemoveStock = (selectedStock: String) => {\r\n        handleRemoveStock(selectedStock);\r\n    };\r\n\r\n    const CardBuilder = () => {\r\n        let cardItems = [];\r\n\r\n        for (let i = 0; i < 3; i++) {\r\n            if (pinnedStocks[i] !== undefined) {\r\n                cardItems.push(\r\n                    <Card \r\n                        pinnedStock={pinnedStocks[i]}\r\n                        removeStock={onRemoveStock}\r\n                        key={i}\r\n                        index={i}\r\n                    />\r\n                )\r\n            } else {\r\n                cardItems.push(\r\n                    <div \r\n                        className=\"\r\n                            p-3 \r\n                            m-3 \r\n                            rounded \r\n                            shadow-sm \r\n                            border\" \r\n                        style={{\r\n                            flex: '1 1 0',\r\n                            minHeight: '300px',\r\n                        }} \r\n                        key={i}\r\n                    >\r\n                        <p className=\"p-5\">\r\n                            Pick an additional stock symbol in the search box above to display stock information\r\n                        </p>\r\n                    </div>\r\n                );\r\n            };\r\n        };\r\n\r\n        return (\r\n            <div className=\"container-fluid mx-0 px-0\">\r\n                <div className=\"row\">\r\n                        {cardItems}\r\n                </div>\r\n            </div>\r\n        );\r\n    };\r\n\r\n    return (\r\n        <div >\r\n            <h1 \r\n                className=\"\r\n                    px-5 \r\n                    p-3 \r\n                    rounded-right \r\n                    bg-secondary \r\n                    text-white \r\n                    shadow-sm\"\r\n                style={{\r\n                    width: '350px', \r\n                }}\r\n            >\r\n                Pinned Stocks\r\n            </h1>\r\n            <div className=\"px-5 pt-4 pb-5\">\r\n                <CardBuilder />\r\n            </div>\r\n            {pinnedStocks && (\r\n                <LineChart pinnedStocks={pinnedStocks} />\r\n            )}\r\n            </div>\r\n    );\r\n};\r\n\r\nexport default PinnedStocks;","import React, { useState } from 'react';\r\nimport SearchInput from \"./SearchInput\";\r\nimport PinnedStocks from './PinnedStocks';\r\n\r\n\r\nconst Dashboard: React.FC = () => {\r\n\r\n    const [selectedStocks, setSelectedStocks] = useState<Array<String>>([]);\r\n\r\n    const handleStockSelect = (e: React.FormEvent<HTMLInputElement>) => {\r\n        const selectedStock = e.target as HTMLElement;\r\n        const { innerText } = selectedStock;\r\n\r\n        if (selectedStocks.length < 3) { \r\n            selectedStocks.includes(innerText) \r\n            ? alert(`Stock ${innerText} has already been pinned to the Dashboard.`)\r\n            : setSelectedStocks([...selectedStocks, innerText])\r\n        }\r\n    };\r\n\r\n    const handleRemoveStock = (selectedStock: String) => {\r\n        setSelectedStocks(selectedStocks.filter((stock: String) => stock !== selectedStock));\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div \r\n                className=\"\r\n                    container-fluid \r\n                    p-5 text-center \r\n                    bg-secondary \r\n                    shadow\"\r\n            >\r\n                <h1 className=\"text-white\">\r\n                    Stock Comparison App\r\n                </h1>\r\n            </div>\r\n            <SearchInput\r\n                handleStockSelect={handleStockSelect}\r\n            />\r\n            <PinnedStocks \r\n                pinnedStocks={selectedStocks}\r\n                handleRemoveStock={handleRemoveStock}\r\n            />\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default Dashboard;","import React from \"react\";\nimport Dashboard from \"./components/Dashboard\";\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <Dashboard />\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport \"bootstrap-icons/font/bootstrap-icons.css\";\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}